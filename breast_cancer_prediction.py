# -*- coding: utf-8 -*-
"""breast_cancer_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MN4nC7Ak8pvpYCszZ5Ovi5wcfHMyUW_u
"""

import warnings
warnings.filterwarnings("ignore")
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px
import matplotlib.patches as  mpatches
from sklearn.model_selection import GridSearchCV
import xgboost as xgb
from xgboost import cv
from xgboost import XGBClassifier

data = pd.read_csv('breast-cancer-dataset.csv')

"""# dataframe of the dataset"""

df = pd.DataFrame(data, columns=['Year', 'Age','Menopause','Tumor Size (cm)','Inv-Nodes','Breast','Metastasis','Breast Quadrant','History','Diagnosis Result'])
df

"""# information of the dataframe"""

print(df.shape)

styles = [{'selector':'caption',
           'props':[('color','black'),
                    ('text-align','center'),
                    ('font-size','15pt'),
                    ('background-color','#e6b8db')]}]

head_of_data = df.head(10).style.set_caption('10 first data').set_table_styles(styles)
head_of_data.set_properties(**{'background-color': '#e6d5e2',
                                    'color':'black',
                                    'border-color':'black'})

head_of_data = df.tail(10).style.set_caption('10 last data').set_table_styles(styles)
head_of_data.set_properties(**{'background-color': '#e6d5e2',
                                    'color':'black',
                                    'border-color':'black'})

def describe(df):

  features=[]
  dtypes=[]
  count=[]
  unique=[]
  missing_values=[]
  min_ =[]
  max_ =[]

  for item in df.columns:
    features.append(item)
    dtypes.append(df[item].dtype)
    count.append(len(df[item]))
    unique.append(len(df[item].unique()))
    missing_values.append(df[item].isna().sum())

    if df[item].dtypes == 'int64' or df[item].dtypes == 'float64':

      min_.append(df[item].min())
      max_.append(df[item].max())

    else:
      min_.append('NaN')
      max_.append('NaN')

  out_put = pd.DataFrame({'Feature':features,'Dtype':dtypes,'Count':count,'Unique':unique,'Missing_value':missing_values,
                          'Min':min_,'Max':max_})

  return out_put.T

describe_dataframe= describe(df)
print(describe_dataframe)

"""# Finding missing value in each column with their unique

**1. Menopause missing value**
"""

df['Menopause'].unique()

"""**2. Tumor Size**"""

df['Tumor Size (cm)'].unique()

"""in Tumor size column there is "#" value as a unique, so it is regarded as missing value

**The index of "#" values in Tumor size column**
"""

df[df['Tumor Size (cm)']=='#'].index.values

"""**3. Inv-Nodes**"""

df['Inv-Nodes'].unique()

"""Inv-Nodes column there are "#" value and number 3  as  uniques, so they are regarded as missing value.(according to dictionary section, Inv-Nodes just has 0,1 values)

**The index of "#" and 3 values in Inv-Nodes column**
"""

df[df['Inv-Nodes']=="3"].index.values

df[df['Inv-Nodes']=="#"].index.values

"""**4. Breast**"""

df['Breast'].unique()

"""in Breast column there is "#" value as a unique, so it is regarded as missing value

**The index of "#" value in Breast column**
"""

df[df['Breast']=='#'].index.values

"""**4. Metastasis**"""

df['Metastasis'].unique()

"""in Metastasis column there is "#" value as a unique, so it is regarded as missing value

**The index of "#" value in Metastasis column**
"""

df[df['Metastasis']=='#'].index.values

"""**5. Breast Quadrant**"""

df['Breast Quadrant'].unique()

"""in Breast Quadrant column there is "#" value as a unique, so it is regarded as missing value.Morover, there is a repeted unique named 'Upper outer ' which is different from 'Upper outer' in ' ' (a space at the end).

**Renaming  'Upper outer ' to 'Upper outer'**
"""

df.loc[df['Breast Quadrant']=='Upper outer ', 'Breast Quadrant'] = 'Upper outer'

"""**The index of "#" value in Breast Quadrant column**"""

df[df['Breast Quadrant']=='#'].index.values

"""**6. History**"""

df['History'].unique()

"""in History column there is "#" value as a unique, so it is regarded as missing value

**The index of "#" value in History column**
"""

df[df['History']=='#'].index.values

"""**7. Diagnosis Result**"""

df['Diagnosis Result'].unique()

"""# Cleaning missing values"""

df2 = df.copy()
df2= df2.drop([30,40,47,67,143,164,166,178,208])

df2.shape

describe(df2)

"""**1. for better understanding of each column(feature), their values are changed from number to string.**"""

df2['Menopause'].replace(0,'No', inplace=True)
df2['Menopause'].replace(1,'Yes', inplace =True)

df2['Inv-Nodes'].replace('0','No', inplace = True)
df2['Inv-Nodes'].replace('1','Yes',inplace = True)

df2['Metastasis'].replace('0','No',inplace = True)
df2['Metastasis'].replace('1','Yes',inplace = True)

df2['History'].replace('0','No',inplace = True)
df2['History'].replace('1','Yes',inplace = True)

df2['Tumor Size (cm)'] = pd.to_numeric(df2['Tumor Size (cm)'])

df2

"""**2. dataframe with numeric values**"""

df3 = df.copy()
df3= df3.drop([30,40,47,67,143,164,166,178,208])

df3['Tumor Size (cm)'] = pd.to_numeric(df3['Tumor Size (cm)'])
df3['Inv-Nodes'] = pd.to_numeric(df3['Inv-Nodes'])
df3['Metastasis'] = pd.to_numeric(df3['Metastasis'])
df3['History'] = pd.to_numeric(df3['History'])

df3['Diagnosis Result'] = df3['Diagnosis Result'].replace('Benign',0)
df3['Diagnosis Result']= df3['Diagnosis Result'].replace('Malignant',1)

df3['Breast'] = df3['Breast'].replace('Right',1)
df3['Breast'] = df3['Breast'].replace('Left',2)

df3['Breast Quadrant'] = df3['Breast Quadrant'].replace('Upper inner',1)
df3['Breast Quadrant'] = df3['Breast Quadrant'].replace('Upper outer',2)
df3['Breast Quadrant'] = df3['Breast Quadrant'].replace('Lower outer',3)
df3['Breast Quadrant'] = df3['Breast Quadrant'].replace('Lower inner',4)

df3

describe(df3)

"""# Using boxplot to find the possible noise"""

data = ['Age', 'Menopause', 'Tumor Size (cm)', 'Inv-Nodes', 'Breast','Metastasis', 'Breast Quadrant', 'History']

fig = make_subplots(rows =8, cols =1  )

for i in range (len(data)):

  fig.add_trace(go.Box(x = df2[data[i]], name = data[i]),row = i+1,col = 1)


fig.update_layout(height = 1000, width = 800)
fig.show()

"""# Pie chart of Benign vs Manignant of all the dataset"""

Diagnosis_Result_uniq = df2["Diagnosis Result"].unique()
Diagnosis_Result_count = df2["Diagnosis Result"].value_counts()

fig = px.pie (values=Diagnosis_Result_count, names=Diagnosis_Result_uniq, title =" Benign vs Manignant of all the dataset")
fig.show()

"""# Separating Benign and Malignant values in two different dataframe"""

healthy = df2[df2['Diagnosis Result']== 'Benign']
df_healthy = pd.DataFrame(healthy)

disease = df2[df2['Diagnosis Result']=='Malignant']
df_disease = pd.DataFrame(disease)

"""**dataframe with numeric values**"""

healthy_num = df3[df3['Diagnosis Result']== 0]
df_healthy_num = pd.DataFrame(healthy_num)

disease_num = df3[df3['Diagnosis Result']==1]
df_disease_num = pd.DataFrame(disease_num)

"""# count plot of each feature

**1. Age**
"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (15,8),  facecolor='#f2faf9',dpi = 150)

fig.suptitle('Age of healthy women vs  women having cancer ',fontsize=20)

ax=sns.countplot(x =df_healthy['Age'],palette="viridis",ax = axes[0])
ax.set_xlabel('Age',fontsize=17)
ax.set_ylabel('Count',fontsize= 17)

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 10),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', lw=0))


ax=sns.countplot(x = df_disease['Age'], palette = 'gist_heat',ax = axes[1])

ax.set_xlabel('Age',fontsize=17)
ax.set_ylabel('Count',fontsize= 17)

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 10),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', lw=0))


plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Age'],shade =True )
sns.kdeplot(df_disease_num['Age'],shade =True)
plt.legend(['Healthy','breast cancer'])
plt.title('Age of healthy women vs  women having cancer ', y= 1.05)
plt.show()

"""**2. Tumor Size**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('Tumor size in healthy women vs  women having cancer ')

ax=sns.countplot(x =df_healthy['Tumor Size (cm)'],palette="viridis",width=0.2,ax = axes[0])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 10),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', lw=0))

ax=sns.countplot(x = df_disease['Tumor Size (cm)'], palette = 'gist_heat',width=0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0,10),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', lw=0))

plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Tumor Size (cm)'],shade =True)
sns.kdeplot(df_disease_num['Tumor Size (cm)'],shade =True)
plt.legend(['Healthy','breast cancer'])
plt.title('Tumor size in healthy women vs  women having cancer ', y=1.05)
plt.show()

"""**3. Menopause**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('Menopause in healthy women in healthy women vs  women having cancer ')

ax=sns.countplot(x =df_healthy['Menopause'],palette="viridis",width=0.2,ax = axes[0])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

ax=sns.countplot(x = df_disease['Menopause'],palette = 'gist_heat',width=0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Menopause'],shade =True )
sns.kdeplot(df_disease_num['Menopause'],shade =True)
plt.legend(['Healthy','breast cancer'])
plt.title('Menopause in healthy women in healthy women vs  women having cancer ',y = 1.05)
plt.show()

"""**4. Inv-Nodes**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('The axillary lymph nodes containing metastatic in healthy women vs  women having cancer ')

ax=sns.countplot(x =df_healthy['Inv-Nodes'],palette="viridis",width=0.2,ax = axes[0])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

ax=sns.countplot(x = df_disease['Inv-Nodes'], palette = 'gist_heat',width=0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Inv-Nodes'],shade =True )
sns.kdeplot(df_disease_num['Inv-Nodes'],shade =True)
plt.legend(['Healthy','breast cancer'])
plt.title('The axillary lymph nodes containing metastatic in healthy women vs  women having cancer ' ,y=1.05)
plt.show()

"""**5. Breast**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('Breast side in healthy women vs women having breast cancer ')

ax=sns.countplot(x =df_healthy['Breast'],palette="viridis",width=0.2,ax = axes[0])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

ax=sns.countplot(x = df_disease['Breast'], palette = 'gist_heat',width=0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Breast'],shade =True )
sns.kdeplot(df_disease_num['Breast'],shade =True)
plt.legend(['Healthy','breast cancer'])
plt.title('Breast side in healthy women vs women having breast cancer ', y=1.05)
plt.show()

"""**6. 'Metastasis**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('Metastasis in healthy women vs women having breast cancer')

ax=sns.countplot(x =df_healthy['Metastasis'],palette="viridis",width=0.2,ax = axes[0])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

ax=sns.countplot(x = df_disease['Metastasis'], palette = 'gist_heat',width=0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Metastasis'],shade =True )
sns.kdeplot(df_disease_num['Metastasis'],shade =True)
plt.title('Metastasis in healthy women vs women having breast cancer', y=1.05)
plt.legend(['Healthy','breast cancer'])
plt.show()

"""**7. Breast Quadrant**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('Breast Quadrant in healthy women and women having breast cancer')

ax= sns.countplot(x =df_healthy['Breast Quadrant'],palette="viridis",width= 0.2,ax = axes[0])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

ax = sns.countplot(x = df_disease['Breast Quadrant'], palette = 'gist_heat',width= 0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))

plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4), facecolor='#f2faf9')
sns.kdeplot(df_healthy_num['Breast Quadrant'],shade =True )
sns.kdeplot(df_disease_num['Breast Quadrant'],shade =True)
plt.title('Breast Quadrant in healthy women and women having breast cancer', y=1.05)
plt.legend(['Healthy','breast cancer'])
plt.show()

"""**8. History**"""

fig,axes = plt.subplots(nrows = 2, ncols = 1, figsize = (8,4),  facecolor='#f2faf9',dpi = 90)

fig.suptitle('History of cancer in healthy and disease women')


ax = sns.countplot(x =df_healthy['History'],palette="viridis",width=0.2,ax = axes[0] )


for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round,pad=0.3',
                    edgecolor='white', facecolor='black', lw=0))



ax =sns.countplot(data = df_disease,x = 'History', palette = 'gist_heat',width= 0.2,ax = axes[1])

for p in ax.patches:

  ax.annotate(format(p.get_height()),
                    (p.get_x()+ p.get_width()/2,
                      p.get_height()), ha='center', va='center',
                    size=8,color='white',
                    weight='bold', backgroundcolor='black', xytext=(0, 5),
                    textcoords='offset points', bbox=dict(boxstyle='round',pad=0.3,
                    edgecolor='white', facecolor='black', lw=0))

plt.tight_layout()
plt.show()

"""![image.png](attachment:fd30cdfc-df15-499c-9f14-d521a3138b20.png)

* **Healthy_count**
"""

age_count=df_healthy["Age"].value_counts()
Menopause_count = df_healthy['Menopause'].value_counts()
Tumor_Size_count = df_healthy['Tumor Size (cm)'].value_counts()
Inv_Nodes_count = df_healthy['Inv-Nodes'].value_counts()
Breast_count=df_healthy['Breast'].value_counts()
Metastasis_count = df_healthy['Metastasis'].value_counts()
Breast_Quadrant_count = df_healthy['Breast Quadrant'].value_counts()
History_count = df_healthy['History'].value_counts()

""" * **Healthy_unique**"""

age_uniq=df_healthy["Age"].unique()
Menopause_uniq = df_healthy['Menopause'].unique()
Tumor_Size_uniq = df_healthy['Tumor Size (cm)'].unique()
Inv_Nodes_uniq = df_healthy['Inv-Nodes'].unique()
Breast_uniq=df_healthy['Breast'].unique()
Metastasis_uniq = df_healthy['Metastasis'].unique()
Breast_Quadrant_uniq = df_healthy['Breast Quadrant'].unique()
History_uniq = df_healthy['History'].unique()

"""* **Disease_count**"""

age_disease_count=df_disease["Age"].value_counts()
Menopause_disease_count = df_disease['Menopause'].value_counts()
Tumor_Size_disease_count = df_disease['Tumor Size (cm)'].value_counts()
Inv_Nodes_disease_count = df_disease['Inv-Nodes'].value_counts()
Breast_disease_count=df_disease['Breast'].value_counts()
Metastasis_disease_count = df_disease['Metastasis'].value_counts()
Breast_Quadrant_disease_count = df_disease['Breast Quadrant'].value_counts()
History_disease_count = df_disease['History'].value_counts()

"""* **Disease_unique**"""

age_disease_uniq=df_disease["Age"].unique()
Menopause_disease_uniq = df_disease['Menopause'].unique()
Tumor_Size_disease_uniq = df_disease['Tumor Size (cm)'].unique()
Inv_Nodes_disease_uniq = df_disease['Inv-Nodes'].unique()
Breast_disease_uniq=df_disease['Breast'].unique()
Metastasis_disease_uniq = df_disease['Metastasis'].unique()
Breast_Quadrant_disease_uniq = df_disease['Breast Quadrant'].unique()
History_disease_uniq = df_disease['History'].unique()

"""#  subplot of pie plot for healthy and disease women

**1. Menopause**
"""

palette_color = sns.color_palette("pastel")

# Wedge properties
wp = {'linewidth': 1, 'edgecolor': "green"}

# Creating autocpt arguments
explode = (0.1, 0.0 )

def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

fig,ax = plt.subplots(nrows=1, ncols =2 , figsize=(7,7),dpi=100)

fig.suptitle("Menopause vs bresat cancer")

#################################### Benign #################################

wedges, texts, autotexts = ax[0].pie(Menopause_count,
                                  autopct=lambda pct: func(pct, Menopause_count),

                                  labels=Menopause_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[0].set_title("Menopause in healthy women",pad=60)

################################# malignant #################################

wedges, texts, autotexts = ax[1].pie(Menopause_disease_count,
                                  autopct=lambda pct: func(pct, Menopause_disease_count),

                                  labels=Menopause_disease_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[1].set_title("Menopause in women having breast cancer",pad=60)


plt.tight_layout()
plt.show()

"""**2. Breast**"""

palette_color = sns.color_palette("pastel")

# Wedge properties
wp = {'linewidth': 1, 'edgecolor': "green"}

# Creating autocpt arguments
explode = (0.1, 0.0 )

def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

fig,ax = plt.subplots(nrows=1, ncols =2 , figsize=(7,7),dpi=100)

fig.suptitle("Breast vs bresat cancer")

#################################### Benign #################################

wedges, texts, autotexts = ax[0].pie(Breast_count,
                                  autopct=lambda pct: func(pct, Breast_count),

                                  labels=Breast_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[0].set_title("Breast in healthy women",pad=60)

################################# malignant #################################

wedges, texts, autotexts = ax[1].pie(Breast_disease_count,
                                  autopct=lambda pct: func(pct, Breast_disease_count),

                                  labels=Breast_disease_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[1].set_title("Breast in women having breast cancer",pad=60)


plt.tight_layout()
plt.show()

"""**3. Breast Quadrant**"""

palette_color = sns.color_palette("pastel")

# Wedge properties
wp = {'linewidth': 1, 'edgecolor': "green"}

# Creating autocpt arguments
explode = (0.1, 0.2,0.0,0.0 )

def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

fig,ax = plt.subplots(nrows=1, ncols =2 , figsize=(7,7),dpi=100)

fig.suptitle("Breast Quadrant vs bresat cancer")

#################################### Benign #################################

wedges, texts, autotexts = ax[0].pie(Breast_Quadrant_count,
                                  autopct=lambda pct: func(pct, Breast_Quadrant_count),

                                  labels=Breast_Quadrant_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[0].set_title("Breast Quadrant in healthy women",pad=60)

################################# malignant #################################

wedges, texts, autotexts = ax[1].pie(Breast_Quadrant_disease_count,
                                  autopct=lambda pct: func(pct, Breast_Quadrant_disease_count),

                                  labels=Breast_Quadrant_disease_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[1].set_title("Breast Quadrant in women having breast cancer",pad=60)


plt.tight_layout()
plt.show()

"""**4. Metastasis**"""

palette_color = sns.color_palette("pastel")

# Wedge properties
wp = {'linewidth': 1, 'edgecolor': "green"}

# Creating autocpt arguments
explode = (0.1, 0.3)

def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

fig,ax = plt.subplots(nrows=1, ncols =2 , figsize=(7,7),dpi=100)

fig.suptitle("Metastasis vs bresat cancer")

#################################### Benign #################################

wedges, texts, autotexts = ax[0].pie(Metastasis_count,
                                  autopct=lambda pct: func(pct, Metastasis_count),

                                  labels=Metastasis_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[0].set_title("Metastasis in healthy women",pad=60)

################################# malignant #################################

wedges, texts, autotexts = ax[1].pie(Metastasis_disease_count,
                                  autopct=lambda pct: func(pct, Metastasis_disease_count),

                                  labels=Metastasis_disease_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[1].set_title("Metastasis in women having breast cancer",pad=60)


plt.tight_layout()
plt.show()

"""**5. Inv_Nodes**"""

palette_color = sns.color_palette("pastel")

# Wedge properties
wp = {'linewidth': 1, 'edgecolor': "green"}

# Creating autocpt arguments
explode = (0.1, 0.3)

def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

fig,ax = plt.subplots(nrows=1, ncols =2 , figsize=(7,7),dpi=100)

fig.suptitle("Inv_Nodes vs bresat cancer")

#################################### Benign #################################

wedges, texts, autotexts = ax[0].pie(Inv_Nodes_count,
                                  autopct=lambda pct: func(pct, Inv_Nodes_count),

                                  labels=Inv_Nodes_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[0].set_title("Inv_Nodes in healthy women",pad=60)

################################# malignant #################################

wedges, texts, autotexts = ax[1].pie(Inv_Nodes_disease_count,
                                  autopct=lambda pct: func(pct, Inv_Nodes_disease_count),

                                  labels=Inv_Nodes_disease_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[1].set_title("Inv_Nodes in women having breast cancer",pad=60)


plt.tight_layout()
plt.show()

"""**6. History**"""

palette_color = sns.color_palette("pastel")

# Wedge properties
wp = {'linewidth': 1, 'edgecolor': "green"}

# Creating autocpt arguments
explode = (0.1, 0.1)

def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

fig,ax = plt.subplots(nrows=1, ncols =2 , figsize=(7,7),dpi=100)

fig.suptitle("Family history of cancer vs bresat cancer")

#################################### Benign #################################

wedges, texts, autotexts = ax[0].pie(History_count,
                                  autopct=lambda pct: func(pct, History_count),

                                  labels=History_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[0].set_title("history in healthy women",pad=60)

################################# malignant #################################

wedges, texts, autotexts = ax[1].pie(History_disease_count,
                                  autopct=lambda pct: func(pct, History_disease_count),

                                  labels=History_disease_uniq,
                                  shadow=True,
                                  explode =explode,
                                  colors=palette_color,
                                  startangle=90,
                                  wedgeprops=wp,
                                  textprops=dict(color="steelblue"))


plt.setp(autotexts, size=9, weight="bold")
ax[1].set_title("history in women having breast cancer",pad=60)


plt.tight_layout()
plt.show()

"""# pair plot"""

sns.pairplot(df3, hue = 'Diagnosis Result')
plt.show()

"""# Heat map"""

sns.heatmap(df3.corr(), annot = True)
plt.title('The correlation among features',y= 1.05)
plt.show()

"""# Breast cancer prediciton"""

from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler

df3

df3.drop(columns=['Year'], inplace=True)

df3

x = df3.drop(columns=['Diagnosis Result'])
y = df3['Diagnosis Result'].values.reshape(-1,1)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.1, random_state = 42)

scaler = StandardScaler()

x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

svm_model = SVC()

svm_model.fit(x_train_scaled, y_train.ravel())

y_svm_pred = svm_model.predict(x_test_scaled)

"""Tuning parameters for svm model"""

param = {'kernel':['linear', 'poly', 'rbf', 'sigmoid'], 'C' : [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]}  # you can consider different parameters

fit_list=[]
acc_cv_list =[]

for i in range (3,15):



  grid_svm = GridSearchCV(estimator = svm_model,   # name of your model
                      param_grid = param,
                      scoring = "accuracy", # the strategy you want to use for evaluation # it is a method
                      cv = i,   # cross validation, you can use "for" to have different cv
                      verbose = 1,
                      n_jobs = -1) # help cpu ----> the less the better

  grid_svm.fit(x_train_scaled, y_train.ravel())
  m = grid_svm.best_params_
  d = grid_svm.score(x_test_scaled, y_test)


  fit_list.append(m)
  acc_cv_list.append(d)

print(fit_list)
print(acc_cv_list )

"""So, the best parameters are k = 3, kernel = linear, C = 0.1"""

best_svm = SVC(kernel='linear', C =0.1)

best_svm.fit(x_train_scaled, y_train.ravel())

y_svm_pred2 = best_svm.predict(x_test_scaled)

print("svm accuracy is :", metrics.accuracy_score(y_svm_pred2, y_test))

x_scaled = scaler.transform(x)

print(classification_report(y, best_svm.predict(x_scaled)))

cm = confusion_matrix(y, best_svm.predict(x_scaled))

fig, ax = plt.subplots(figsize=(4,4))

ax.imshow(cm)
ax.grid(False)
ax.xaxis.set(ticks =(0,1),ticklabels=("Predicted benign","Predicted malignant"))
ax.yaxis.set(ticks =(0,1),ticklabels=("Actual benign","Actual malignant"))

ax.set_ylim(1.5, -0.5)

for i in range(2):
    for j in range(2):

        ax.text(j,i,cm[i,j], ha = "center", va ="center", color = 'red')

plt.show()

"""# **XGBOOST model**"""

import xgboost as xgb

from xgboost import XGBClassifier

params = {'objective': 'binary:logistic' ,'max_depth': 4,'alpha': 10, 'learning_rate':0.1, 'n_estimators':100}

xgb_model = XGBClassifier(** params)

xgb_model.fit(x_train_scaled, y_train.ravel())

y_xgb_pred = xgb_model.predict(x_test_scaled)

print("xgb accuracy is :", metrics.accuracy_score(y_xgb_pred, y_test))

print(classification_report(y, xgb_model.predict(x_scaled)))

cm = confusion_matrix(y, xgb_model.predict(x_scaled))

fig, ax = plt.subplots(figsize=(4,4))

ax.imshow(cm)
ax.grid(False)
ax.xaxis.set(ticks =(0,1),ticklabels=("Predicted benign","Predicted malignant"))
ax.yaxis.set(ticks =(0,1),ticklabels=("Actual benign","Actual malignant"))

ax.set_ylim(1.5, -0.5)

for i in range(2):
    for j in range(2):

        ax.text(j,i,cm[i,j], ha = "center", va ="center", color = 'red')

plt.show()

"""# **k_fold cross validation in XGBOOST**"""

feature_names=['Age', 'Menopause', 'Tumor Size (cm)', 'Inv-Nodes', 'Breast','Metastasis', 'Breast Quadrant', 'History']

data_matrix = xgb.DMatrix(data=x, label =y, feature_names=feature_names)

from xgboost import cv

params = {'objective': 'binary:logistic' ,'max_depth': 4, 'alpha': 10, 'learning_rate':0.1, 'n_estimators':100}

xgb_cv = cv(dtrain = data_matrix, params = params, nfold = 3,
            num_boost_round = 50, early_stopping_rounds =10, metrics= 'auc', as_pandas = True, seed =123)

xgb_cv

# Set the feature names
xgb_model.get_booster().feature_names = feature_names

xgb.plot_importance(xgb_model)

plt.rcParams['figure.figsize']=[6,5]
plt.show()

